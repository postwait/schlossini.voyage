#!/usr/bin/env node

/**
 * Module dependencies.
 */

if(process.argv.length < 3) {
  console.log(process.argv[1], "<app|publish>", "[config.json]")
  process.exit(-1)
}

var Config = require('../lib/config');
var config = (new Config(process.argv[3] || 'etc/config.json')).config();
var app = require('../lib/' + process.argv[2]);
var debug = require('debug')('voyage:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || parseInt(config.www.port,10) || 8888;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}
